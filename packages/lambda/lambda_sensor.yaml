counter:
## to monitor the heat pump's cycling, here are the sensors.
  eu08l_heat_pump_cycling:
    name: eu08l_heat_pump_cycling
    initial: 46
  eu08l_hot_water_cycling:
    name: eu08l_hot_water_cycling
    initial: 112                                                                                                                                               
  eu08l_heat_pump_cycling_daily:
    name: eu08l_heat_pump_cycling_daily
    initial: 0
  eu08l_hot_water_cycling_daily:
    name: eu08l_hot_water_cycling_daily
    initial: 0
     

#### neue Berechnung Energieverbrauch Lambda nach Art 
input_number:
  eu08l_last_consumption:
    name: "eu08l_last_power_consumption"
    min: 0
    max: 10000000000000
    step: 0.001
    unit_of_measurement: "kWh"
  eu08l_energy_heating_sum:
    name: "eu08l_energy_heating_sum"
    min: 0.001
    max: 10000000000000
    step: 1
    unit_of_measurement: "kWh"
  eu08l_energy_hot_water_sum:
    name: "eu08l_energy_hot_water_sum"
    min: 0
    max: 10000000000000
    step: 0.001
    unit_of_measurement: "kWh"


sensor:
  - platform: template
    sensors:
      eu08l_cop_calc:
        friendly_name: "eu08l_cop_calc"
        value_template: >
          {{ (states('sensor.eu08l_hp1_compressor_thermal_energy_output_accumulated') | float(0) /
              states('sensor.eu08l_hp1_compressor_power_consumption_accumulated') | float(0)) | round(2) }}

  - platform: template
    sensors:
      eu08l_total_power_consumption_lambda:
        friendly_name: "eu08l total power consumption Lambda"
        unit_of_measurement: "W"
        value_template: >
          {{ (states('sensor.shelly3emlambda_channel_a_power') | float +
              states('sensor.shelly3emlambda_channel_b_power') | float +
              states('sensor.shelly3emlambda_channel_c_power') | float) * -1 }}
        availability_template: >
          {{ states('sensor.shelly3emlambda_channel_a_power') | is_number and
             states('sensor.shelly3emlambda_channel_b_power') | is_number and
             states('sensor.shelly3emlambda_channel_c_power') | is_number }}


  #### boiler energy loss calculation ### not perfect :-(
  - platform: statistics
    name: eu08l_boil1_max_temperature
    state_characteristic: value_max
    entity_id: sensor.eu08l_boil1_actual_high_temperature
    max_age:
      hours: 24
  - platform: statistics
    name: eu08l_boil1_min_temperature
    state_characteristic: value_min
    entity_id: sensor.eu08l_boil1_actual_high_temperature
    max_age:
      hours: 24
  
  - platform: template
    sensors:
      eu08l_boil1_min_temp_time:
        friendly_name: "Zeit der niedristen Temperatur im WW Speicher"
        value_template: >
          {% set max_temp = states('sensor.eu08l_boil1_min_temperature') %}
          {% for state in states.sensor %}
            {% if state.state == max_temp %}
              {{ as_timestamp(state.last_changed) | timestamp_custom('%Y-%m-%d %H:%M:%S', True) }}
            {% endif %}
          {% endfor %}
  - platform: template
    sensors:
      eu08l_boil1_max_temp_time:
        friendly_name: "Zeit der höchsten Temperatur im WW Speicher"
        value_template: >
          {% set max_temp = states('sensor.eu08l_boil1_max_temperature') %}
          {% for state in states.sensor %}
            {% if state.state == max_temp %}
              {{ as_timestamp(state.last_updated) | timestamp_custom('%Y-%m-%d %H:%M:%S', True) }}
            {% endif %}
          {% endfor %}
  - platform: template
    sensors:
      eu08l_boil1_heat_loss_hour:
        friendly_name: "Wärmeverlust im WW Speicher"
        unit_of_measurement: '°C/h'
        value_template: >
          {% set now = now() %}
            {% set sixteen_today = now.replace(hour=16, minute=30, second=0) %}
            {% set sixteen_yesterday = sixteen_today - timedelta(days=1) %}
            {% if now < sixteen_today %}
              {% set diff = now - sixteen_yesterday %}
            {% else %}
              {% set diff = now - sixteen_today %}
            {% endif %}
            {{ (((states['sensor.EU08L_Boil1_max_temperature'].state) | float() - (states['sensor.EU08L_Boil1_Actual_high_temperature'].state) | float()) / diff.total_seconds() *3600) |round(2) }}
  ##### daily Energy heating & hot water

utility_meter:
  eu08l_energy_heating_daily:
    source: input_number.eu08l_energy_heating_sum
    cycle: daily
  eu08l_energy_heating_monthly:
    source: input_number.eu08l_energy_heating_sum
    cycle: monthly

  eu08l_energy_hot_water_daily:
    source: input_number.eu08l_energy_hot_water_sum
    cycle: daily
  eu08l_energy_hot_water_monthly:
    source: input_number.eu08l_energy_hot_water_sum
    cycle: monthly





