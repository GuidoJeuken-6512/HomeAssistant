# für das Energiedashboard werden folgende Sensoren benötigt
# PV Power "W" total, die Summe aller Sensoren aller PV Anlagen, bei mir Deye + BKW, ich sehe einen dritten Wert in der Konfiguration vor.
##### "total PV Power generated"
#   Daily und total Max Werte, wie viel Watt wurden maximal erzeugt, heute bzw jemals
###### "daily_max_total_pv_power_generated" 
###### "monthly_max_total_pv_power_generated"
###### "yearly_max_total_pv_power_generated"
# Erzeugte Energie kWh
# Summe aller PV und BKW kWh
# daily  monthly yearly statistik
# 
# eingespeiste Energie
# daily monthly yearly
#
# eingekaufte Energie
#  daily monthly yearly
#
#### Batterie ?????




template:
  - sensor:
      - name: "total PV Power generated"
        unit_of_measurement: "kW"
        device_class: "power"
        state_class: measurement
      #### add power of all PV devices
      ### values must be in "W", or must be calculated to "w"
        state: >
          {% set sensor1 = 'sensor.deye_total_grid_power' %}
          {% set sensor2 = 'sensor.bkwshelly' %}
          {% set sensor3 = 'sensor._3' %}
          {{ (((states(sensor1) | float(0) *-1 )  + (states(sensor2) | float(0)) + (states(sensor3) | float(0))) /1000 )| round(1)}}
          

sensor:
####   max_total_pv_power_generated statistics
  - platform: statistics
    name: "daily_max_total_pv_power_generated"
    entity_id: sensor.total_pv_power_generated
    state_characteristic: value_max
    max_age:
      hours: 24
  - platform: statistics
    name: "monthly_max_total_pv_power_generated"
    entity_id: sensor.total_pv_power_generated
    state_characteristic: value_max
    max_age:
      days: 30  
  - platform: statistics
    name: "yearly_max_total_pv_power_generated"
    entity_id: sensor.total_pv_power_generated
    state_characteristic: value_max
    max_age:
      days: 365
########################################################
#### SummenSensor für Shelly 3EM #########
  - platform: template
    sensors:
      3em_total_energy_calc:
        friendly_name: "3EM Total Energy"
        unit_of_measurement: 'kWh'
        value_template: >
          {% set a = states('sensor.3em_grid_channel_a_energy') | float(0) %}
          {% set b = states('sensor.3em_grid_channel_b_energy') | float(0) %}
          {% set c = states('sensor.3em_grid_channel_c_energy') | float(0) %}
          {{ a + b + c }}
        device_class: energy
        entity_id:
          - sensor.3em_grid_channel_a_energy
          - sensor.3em_grid_channel_b_energy
          - sensor.3em_grid_channel_c_energy
          
  - platform: template
    sensors:
      3em_total_energy_returned_calc:
        friendly_name: "3EM total energy returned"
        unit_of_measurement: 'kWh'
        value_template: >
          {% set a = states('sensor.3em_grid_channel_a_energy_returned') | float(0) %}
          {% set b = states('sensor.3em_grid_channel_b_energy_returned') | float(0) %}
          {% set c = states('sensor.3em_grid_channel_c_energy_returned') | float(0) %}
          {{ a + b + c }}
        device_class: energy
        entity_id:
          - sensor.3em_grid_channel_a_energy_returned
          - sensor.3em_grid_channel_b_energy_returned
          - sensor.3em_grid_channel_c_energy_returned

  # Sensor for Riemann sum of energy import (W -> Wh)
  - platform: integration
    source: sensor.power_import
    name: energy_import_sum
    unit_prefix: k
    round: 2
    method: left

  # Sensor for Riemann sum of energy export (W -> Wh)
  - platform: integration
    source: sensor.3em_total_energy_returned_calc
    name: energy_export_sum
    unit_prefix: k
    round: 2
    method: left