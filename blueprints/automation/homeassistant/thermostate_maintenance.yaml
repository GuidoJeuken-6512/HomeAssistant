blueprint:
  name: Thermostat Valve Maintenance Mode
  description: >
    This automation opens and closes all controllable thermostat valves
    once a week to ensure they do not stick. The thermostats are then reset
    to the original temperature.
  domain: automation
  input:
    time:
      name: Time
      description: The time at which the automation should run.
      selector:
        time:
    weekday:
      name: Weekday
      description: The day of the week on which the automation should run.
      selector:
        select:
          options:
            - mon
            - tue
            - wed
            - thu
            - fri
            - sat
            - sun
    exclude_thermostats:
      name: Thermostats to Exclude
      description: Thermostats that should not be included in the maintenance mode.
      default: []
      selector:
        entity:
          domain: climate
          multiple: true
    delay_time:
      name: Delay Time
      description: The delay time between actions (in the format HH:MM:SS) for non-FRITZ! thermostats.
      default: "00:01:00"
      selector:
        text:
          type: text
    fritz_delay_time:
      name: FRITZ! Delay Time
      description: > 
        The delay time between actions (in the format HH:MM:SS) for FRITZ! thermostats.
        FRITZ! thermostats need at least 15 minutes to update the values.
      default: "00:16:00"
      selector:
        text:
          type: text

trigger:
  - platform: time
    at: !input time
condition:
  - condition: time
    weekday: !input weekday
action:
  - variables:
      thermostats: >
        {{ states.climate | map(attribute='entity_id') | list }}
      exclude_thermostats: !input exclude_thermostats
      delay_time: !input delay_time
      fritz_delay_time: !input fritz_delay_time
  - variables:
      original_temperatures: >
        {% set temps = namespace(value=[]) %}
        {% for thermostat in thermostats if thermostat not in exclude_thermostats %}
          {% set temp = state_attr(thermostat, 'temperature') %}
          {% if temp is not none %}
            {% set temps.value = temps.value + [{'entity_id': thermostat, 'temperature': temp}] %}
          {% endif %}
        {% endfor %}
        {{ temps.value }}
  - repeat:
      for_each: >
        {{ thermostats | reject('in', exclude_thermostats) | list }}
      sequence:
        - variables:
            max_temp: "{{ state_attr(repeat.item, 'max_temp') }}"
            min_temp: "{{ state_attr(repeat.item, 'min_temp') }}"
            curr_temp: "{{ state_attr(repeat.item, 'temperature') }}"
            current_delay_time: >
              {% if state_attr(repeat.item, 'min_temp') == 8 and state_attr(repeat.item, 'max_temp') == 28 %}
                {{ fritz_delay_time }}
              {% else %}
                {{ delay_time }}
              {% endif %}
        - service: climate.set_temperature
          target:
            entity_id: "{{ repeat.item }}"
          data:
            temperature: "{{ max_temp }}"
          continue_on_error: true
        - delay: "{{ current_delay_time }}"
        - service: climate.set_temperature
          target:
            entity_id: "{{ repeat.item }}"
          data:
            temperature: "{{ min_temp }}"
          continue_on_error: true
        - delay: "{{ current_delay_time }}"
        - service: climate.set_temperature
          target:
            entity_id: "{{ repeat.item }}"
          data:
            temperature: >
              {% if curr_temp > max_temp %}
                {{ max_temp }}
              {% elif curr_temp < min_temp %}
                {{ min_temp }}
              {% else %}
                {{ curr_temp }}
              {% endif %}
          continue_on_error: true
        - delay: "{{ current_delay_time }}"
mode: single
